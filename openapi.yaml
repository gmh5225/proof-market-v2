openapi: 3.0.3
info:
  title: Proof Market V2
  description: Proof Market V2
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    StatementItem:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        url:
          type: string
        input_description:
          type: string
        type:
          type: string
        isPrivate:
          type: string
        definition:
          type: string
    RequestItem:
      type: object
      properties:
        _key:
          type: number
        status:
          type: string
        statement_key:
          type: number
        cost:
          type: number
        proof_key:
          type: string
        input:
          type: object
        aggregated_mode_id:
          type: number
    ProposalItem:
      type: object
      properties:
        statement_key:
          type: number
        request_key:
          type: number
        _key:
          type: number
        aggregated_mode_id:
          type: number
        status:
          type: string
          enum:
            - NEW
            - PENDING
            - DONE
    ProofItem:
      type: object
      properties:
        id:
          type: number
        proof:
          type: object

paths:
  /healthcheck:
    get:
      summary: Health check
      operationId: healthcheck
      responses:
        '200':
          description: Ok

  /user/signup:
    post:
      summary: User signup
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                passwd:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                  jwt:
                    type: string

  /user/signin:
    post:
      summary: User signin
      operationId: signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User signed in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                  jwt:
                    type: string
        '401':
          description: Invalid credentials

  /user/balance:
    get:
      summary: Get user balance
      operationId: balance
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                  balance:
                    type: number
                  blocked:
                    type: number
        '401':
          description: Unauthorized
        '400':
          description: User not found

  /user/exists/{login}:
    head:
      summary: Check if user exists
      operationId: exists
      parameters:
        - in: path
          name: login
          required: true
          schema:
            type: string
          description: Login
      responses:
        '200':
          description: User exists
        '404':
          description: User not found

  /user/me:
    get:
      summary: Get user details
      operationId: userMe
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  login:
                    type: string
                  balance:
                    type: number
                  producer:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '400':
          description: User not found

  /producer:
    post:
      summary: Register as producer(or update)
      operationId: registerProducer
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                url:
                  type: string
                ethAddress:
                  type: string
      responses:
        '200':
          description: Producer registered or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                  name:
                    type: string
                  description:
                    type: string
                  url:
                    type: string
                  ethAddress:
                    type: string
        '401':
          description: Invalid credentials

  /statement/{id}:
    get:
      summary: Get statement by id
      operationId: getStatement
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: Statement Id
      responses:
        '200':
          description: Statement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementItem'
        '401':
          description: Invalid credentials
        '404':
          description: Statement not found

  /statement:
    get:
      summary: Get statements by filter
      operationId: getStatements
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Statements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatementItem'
        '401':
          description: Invalid credentials
    post:
      summary: Create statement
      operationId: createStatement
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                url:
                  type: string
                ethAddress:
                  type: string
      responses:
        '200':
          description: Statement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementItem'
        '401':
          description: Invalid credentials

  /request/{id}:
    get:
      summary: Get request by id
      operationId: getRequest
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: Request Id
      responses:
        '200':
          description: Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestItem'
        '401':
          description: Invalid credentials
        '404':
          description: Request not found

  /request/filter:
    get:
      summary: Get request by filter
      operationId: getRequestsFilter
      security:
        - bearerAuth: [ ]
      parameters:
        - name: costFrom
          in: query
          required: false
          schema:
            type: string
        - name: createdAtFrom
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestItem'
        '401':
          description: Invalid credentials
    post:
      summary: Create request
      operationId: createRequest
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statement_key:
                  type: string
                input:
                  type: object
                cost:
                  type: number
                aggregated_mode_id:
                  type: number
      responses:
        '200':
          description: Request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestItem'
        '401':
          description: Invalid credentials

  /proposal:
    get:
      summary: Get proposals by filter
      operationId: getProposalsFilter
      security:
        - bearerAuth: [ ]
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - NEW
              - PENDING
              - DONE
      responses:
        '200':
          description: Proposals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalItem'
        '401':
          description: Invalid credentials
    post:
      summary: Create proposal
      operationId: createProposal
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                request_id:
                  type: number
                cost:
                  type: number
                aggregated_mode_id:
                  type: number
                wait_period_in_seconds:
                  type: number
      responses:
        '200':
          description: Proposal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalItem'
        '401':
          description: Invalid credentials

  /proposal/{id}:
    get:
      summary: Get proposal by id
      operationId: getProposal
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: Proposal Id
      responses:
        '200':
          description: Proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalItem'
        '401':
          description: Invalid credentials
        '404':
          description: Proposal not found

  /proof:
    post:
      summary: Submit proof
      operationId: submitProof
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                proof:
                  type: object
                request_key:
                  type: number
                proposal_key:
                  type: number
      responses:
        '200':
          description: Proposal
        '401':
          description: Invalid credentials
        '400':
          description: Request not found

  /proof/{id}:
    get:
      summary: Get proof by id
      operationId: getProof
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: Proof Id
      responses:
        '200':
          description: Proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProofItem'
        '401':
          description: Invalid credentials
        '400':
          description: Proof not found