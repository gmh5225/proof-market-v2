openapi: 3.0.3
info:
  title: Proof Market V2
  description: Proof Market V2
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /healthcheck:
    get:
      summary: Health check
      operationId: healthcheck
      responses:
        '200':
          description: Ok

  /user/signup:
    post:
      summary: User signup
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                passwd:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                  jwt:
                    type: string

  /user/signin:
    post:
      summary: User signin
      operationId: signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User signed in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: number
                  jwt:
                    type: string
        '401':
          description: Invalid credentials

  /user/balance:
    get:
      summary: Get user balance
      operationId: balance
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                  balance:
                    type: number
                  blocked:
                    type: number
        '401':
          description: Unauthorized
        '400':
          description: User not found

  /user/exists/{login}:
    head:
      summary: Check if user exists
      operationId: exists
      parameters:
        - in: path
          name: login
          required: true
          schema:
            type: string
          description: Login
      responses:
        '200':
          description: User exists
        '404':
          description: User not found

  /user/me:
    get:
      summary: Get user details
      operationId: userMe
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  login:
                    type: string
                  balance:
                    type: number
                  producer:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '400':
          description: User not found